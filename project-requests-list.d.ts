/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   project-requests-list.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../paper-checkbox/paper-checkbox.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="../dom-reorderer/dom-reorderer.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-item/paper-item-body.d.ts" />
/// <reference path="../http-method-label/http-method-label.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-menu-button/paper-menu-button.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-styles.d.ts" />

declare namespace UiElements {

  /**
   * A list of requests in the project details view.
   *
   * The list doesn't offer any logic related to data models. Actions peformed
   * by the user have to be handled by event handlers and performed in
   * hosting application.
   *
   * Note: **All events fired by this element do not bubbles**.
   *
   * ### Example
   *
   * ```html
   * <project-requests-list items="[...]"></project-requests-list>
   * ```
   *
   * ```javascript
   * document.querySelector('project-requests-list')
   * .addEventListener('list-items-delete', function(e) {
   *  console.log('Items to delete:', e.detail.items);
   * });
   * ```
   *
   * ### Styling
   *
   * `<project-requests-list>` provides the following custom properties and
   * mixins for styling:
   *
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--project-requests-list` | Mixin applied to the element | `{}`
   * `--project-requests-list-item` | Mixin applied to each item on the list | `{}`
   * `--project-requests-list-item-selected-background-color` | Background color of selected item | `#E0E0E0`
   * `--project-requests-list-item-selected` | Mixin applied to selected item | `{}`
   * `--action-button` | Mixin apllied to the primary action buttons | `{}`
   * `--secondary-action-button-color` | Color of the secondary action button | `--primary-color`
   * `--primary-color` | Color of the secondary action buttons | ``
   * `--arc-font-body1` | Mixin applied to the labels in the table header | `{}`
   * `--project-requests-list-method-label` | Mixin applied to the `http-method-label` element | `{}`
   * `--project-requests-list-url-label` | Mixin applied to the URL label element | `{}`
   * `--project-requests-list-name-label` | Mixin applied to the request name label element | `{}`
   * `--project-requests-list-body` | Mixn applied to the URL and name container | `{}`
   * `--project-requests-list-header` | Mixin applied to the list header options section. | `{}`
   * `--project-requests-list-selection-counter` | Mixin applied to the selection counter | `{}`
   * `--project-requests-list-search-input` | Mixin applied to the search input | `{}`
   * `--project-requests-list-item-dragging-background-color` | Item bg color when dragging | `#fff`
   * * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   */
  class ProjectRequestsList extends Polymer.Element {

    /**
     * List of requests to render.
     */
    requests: Array<object|null>|null;

    /**
     * List of selected items on the list.
     */
    selectedItems: any[]|null|undefined;

    /**
     * If true, the user selected some elements on list. Check the
     * `this.selectedItems` property to check for the selected elements.
     */
    readonly hasSelection: boolean|null|undefined;

    /**
     * True to select all elements on the list
     */
    allSelected: boolean|null|undefined;

    /**
     * Filter keyword. It filters the view matching name, url or method.
     */
    keyword: string|null|undefined;

    /**
     * When set it renders the view in 2 lines
     */
    twoLines: any;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Computes if the item has selected class name.
     */
    _computeRowClass(selected: Boolean|null): String|null|undefined;

    /**
     * Handler for click action on the "open" button
     */
    _navigateItem(e: ClickEvent|null): void;

    /**
     * Computes the `hasSelection` property value.
     *
     * @param length Curent size of selection
     * @returns True if argument > 0
     */
    _computeHasSelection(length: Number|null): Boolean|null;

    /**
     * Toggles selection of of all itmes on the list.
     *
     * @param allSelected Current state of the `allSelected` property.
     */
    _toggleSelectAll(allSelected: Boolean|null): void;
    _computeOptionsTableClass(hasSelection: any): any;

    /**
     * Informs hosting application to delete currently selected items.
     */
    _deleteSelected(): void;

    /**
     * When selection is set it calls `_dispatchExport()` event with list
     * of items to export.
     */
    _exportSelected(): void;

    /**
     * Dispatches `list-items-export` event.
     * The event do not bubble.
     *
     * @param items List of items to export.
     * @returns e
     */
    _dispatchExport(items: Array<object|null>|null): CustomEvent|null;

    /**
     * Closes list menu and resets its selection.
     */
    _closeMenu(): void;

    /**
     * Filter function for the table.
     *
     * @param item Request item.
     * @returns True when the item should be rendered given current `keyword`.
     */
    _filterView(item: object|null): Boolean|null;

    /**
     * Re-renders the view when the keyword change to apply filter
     */
    _reRender(): void;

    /**
     * Called to request details panel for the list item
     */
    _requestDetails(e: any): void;

    /**
     * Handler for the selection related events.
     */
    _onSelectItem(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "project-requests-list": UiElements.ProjectRequestsList;
}
